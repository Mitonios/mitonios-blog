<?php

namespace common\models;

use common\components\Mitonios;
use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "content".
 *
 * @property integer $id
 * @property string $title
 * @property string $avatar
 * @property string $slug
 * @property string $sapo
 * @property string $body
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $status
 * @property integer $category_id
 */
class Content extends \yii\db\ActiveRecord
{
    const STATUS_DRAFT = 0;
    const STATUS_PUBLISH = 1;
    /**
     * @var UploadedFile
     */
    public $avatarFile;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'content';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['created_at', 'updated_at', 'status', 'category_id'], 'integer'],
            [['title', 'slug'], 'string', 'max' => 255],
            [['sapo'], 'string', 'max' => 1000],
            [['body'], 'safe'],
            [['avatarFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, gif, bmp'],
        ];
    }

    public function upload()
    {
        if ($this->validate()) {
            if (isset($this->avatarFile)) {
                if (!is_dir(Yii::$app->params['uploadPath'] . '/avatar'))
                    mkdir(Yii::$app->params['uploadPath'] . '/avatar', 0777, true);
                $this->avatarFile->saveAs(Yii::$app->params['uploadPath'] . '/avatar/' . $this->avatarFile->baseName . '.' . $this->avatarFile->extension);
                $this->avatar = '/avatar/' . $this->avatarFile->baseName . '.' . $this->avatarFile->extension;
                $this->save(false);
            }
            return true;
        } else {
            return false;
        }
    }

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
            ],
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'slug' => 'Slug',
            'sapo' => 'Sapo',
            'created_at' => 'Date Created',
            'updated_at' => 'Date Updated',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function beforeSave($insert)
    {
        $this->status = Yii::$app->request->post('save');
        if (empty($this->sapo)) {
            $this->sapo = Mitonios::gioi_han_so_tu(strip_tags($this->body));
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
